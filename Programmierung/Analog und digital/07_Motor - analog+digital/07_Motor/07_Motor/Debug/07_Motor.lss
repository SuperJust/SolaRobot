
07_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000400  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800100  00800100  00000474  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d12  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a6  00000000  00000000  00001296  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ff  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000213c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a4  00000000  00000000  000022fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000455  00000000  00000000  000029a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002df5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_1>
   8:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 32       	cpi	r26, 0x21	; 33
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a2 01 	call	0x344	; 0x344 <main>
  88:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z4Initv>:
//Turn left on the spot
void Turn_left (unsigned char velocity) {
	PWMA = velocity; //Pulswidth modulation, MotorA
	PWMB = velocity; //MotorB
	PORTB &= ~(1 << PORTB1); //MotorA
	PORTB |=  (1 << PORTB0); //MotorB, PORTB 0bxxxxxx01
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
  94:	17 b8       	out	0x07, r1	; 7
  96:	80 ef       	ldi	r24, 0xF0	; 240
  98:	8a b9       	out	0x0a, r24	; 10
  9a:	8a e0       	ldi	r24, 0x0A	; 10
  9c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	8d bb       	out	0x1d, r24	; 29
  a4:	81 ea       	ldi	r24, 0xA1	; 161
  a6:	84 bd       	out	0x24, r24	; 36
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	85 bd       	out	0x25, r24	; 37
  ac:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
  b0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
  b4:	92 e0       	ldi	r25, 0x02	; 2
  b6:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
  c0:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
  c4:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
  c8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
  cc:	81 e6       	ldi	r24, 0x61	; 97
  ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
  d2:	8d e8       	ldi	r24, 0x8D	; 141
  d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  d8:	08 95       	ret

000000da <_Z29Computing_Transmission_Valuesh>:
  da:	29 e2       	ldi	r18, 0x29	; 41
  dc:	82 9f       	mul	r24, r18
  de:	21 2d       	mov	r18, r1
  e0:	11 24       	eor	r1, r1
  e2:	22 95       	swap	r18
  e4:	2f 70       	andi	r18, 0x0F	; 15
  e6:	38 2f       	mov	r19, r24
  e8:	94 e6       	ldi	r25, 0x64	; 100
  ea:	29 9f       	mul	r18, r25
  ec:	30 19       	sub	r19, r0
  ee:	11 24       	eor	r1, r1
  f0:	9d ec       	ldi	r25, 0xCD	; 205
  f2:	39 9f       	mul	r19, r25
  f4:	31 2d       	mov	r19, r1
  f6:	11 24       	eor	r1, r1
  f8:	36 95       	lsr	r19
  fa:	36 95       	lsr	r19
  fc:	36 95       	lsr	r19
  fe:	89 9f       	mul	r24, r25
 100:	91 2d       	mov	r25, r1
 102:	11 24       	eor	r1, r1
 104:	96 95       	lsr	r25
 106:	96 95       	lsr	r25
 108:	96 95       	lsr	r25
 10a:	99 0f       	add	r25, r25
 10c:	49 2f       	mov	r20, r25
 10e:	44 0f       	add	r20, r20
 110:	44 0f       	add	r20, r20
 112:	94 0f       	add	r25, r20
 114:	89 1b       	sub	r24, r25
 116:	80 5d       	subi	r24, 0xD0	; 208
 118:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Trans_data+0x2>
 11c:	21 11       	cpse	r18, r1
 11e:	0c c0       	rjmp	.+24     	; 0x138 <_Z29Computing_Transmission_Valuesh+0x5e>
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <Trans_data>
 126:	31 11       	cpse	r19, r1
 128:	03 c0       	rjmp	.+6      	; 0x130 <_Z29Computing_Transmission_Valuesh+0x56>
 12a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Trans_data+0x1>
 12e:	08 95       	ret
 130:	30 5d       	subi	r19, 0xD0	; 208
 132:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <Trans_data+0x1>
 136:	08 95       	ret
 138:	ee e1       	ldi	r30, 0x1E	; 30
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	20 5d       	subi	r18, 0xD0	; 208
 13e:	20 83       	st	Z, r18
 140:	30 5d       	subi	r19, 0xD0	; 208
 142:	31 83       	std	Z+1, r19	; 0x01
 144:	08 95       	ret

00000146 <_Z14USART_Transmith>:
 146:	e0 ec       	ldi	r30, 0xC0	; 192
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	90 81       	ld	r25, Z
 14c:	95 ff       	sbrs	r25, 5
 14e:	fd cf       	rjmp	.-6      	; 0x14a <_Z14USART_Transmith+0x4>
 150:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 154:	08 95       	ret

00000156 <_Z10USART_Initj>:
 156:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 15a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 15e:	88 e1       	ldi	r24, 0x18	; 24
 160:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 16a:	08 95       	ret

0000016c <__vector_9>:
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	2f 93       	push	r18
 178:	3f 93       	push	r19
 17a:	4f 93       	push	r20
 17c:	5f 93       	push	r21
 17e:	6f 93       	push	r22
 180:	7f 93       	push	r23
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
 18e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <T2ck>
 192:	80 ff       	sbrs	r24, 0
 194:	0b c0       	rjmp	.+22     	; 0x1ac <__vector_9+0x40>
 196:	ea e7       	ldi	r30, 0x7A	; 122
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 64       	ori	r24, 0x40	; 64
 19e:	80 83       	st	Z, r24
 1a0:	25 e1       	ldi	r18, 0x15	; 21
 1a2:	2a 95       	dec	r18
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <__vector_9+0x36>
 1a6:	00 00       	nop
 1a8:	2a 98       	cbi	0x05, 2	; 5
 1aa:	10 c0       	rjmp	.+32     	; 0x1cc <__vector_9+0x60>
 1ac:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Channel>
 1b0:	8f 5f       	subi	r24, 0xFF	; 255
 1b2:	88 30       	cpi	r24, 0x08	; 8
 1b4:	19 f0       	breq	.+6      	; 0x1bc <__vector_9+0x50>
 1b6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Channel>
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__vector_9+0x54>
 1bc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <Channel>
 1c0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Channel>
 1c4:	80 66       	ori	r24, 0x60	; 96
 1c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 1ca:	2a 9a       	sbi	0x05, 2	; 5
 1cc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <T2ck>
 1d0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <T2ck+0x1>
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	80 3d       	cpi	r24, 0xD0	; 208
 1d8:	27 e0       	ldi	r18, 0x07	; 7
 1da:	92 07       	cpc	r25, r18
 1dc:	29 f0       	breq	.+10     	; 0x1e8 <__vector_9+0x7c>
 1de:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <T2ck+0x1>
 1e2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <T2ck>
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <__vector_9+0x84>
 1e8:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <T2ck+0x1>
 1ec:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <T2ck>
 1f0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Counter_US>
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Counter_US>
 1fa:	81 11       	cpse	r24, r1
 1fc:	15 c0       	rjmp	.+42     	; 0x228 <__vector_9+0xbc>
 1fe:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timer>
 202:	88 23       	and	r24, r24
 204:	19 f0       	breq	.+6      	; 0x20c <__vector_9+0xa0>
 206:	8f 5f       	subi	r24, 0xFF	; 255
 208:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timer>
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	80 69       	ori	r24, 0x90	; 144
 210:	8b b9       	out	0x0b, r24	; 11
 212:	85 e3       	ldi	r24, 0x35	; 53
 214:	8a 95       	dec	r24
 216:	f1 f7       	brne	.-4      	; 0x214 <__vector_9+0xa8>
 218:	00 00       	nop
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	8f 76       	andi	r24, 0x6F	; 111
 21e:	8b b9       	out	0x0b, r24	; 11
 220:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 224:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 228:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <T2ck>
 22c:	80 ff       	sbrs	r24, 0
 22e:	2b c0       	rjmp	.+86     	; 0x286 <__vector_9+0x11a>
 230:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Counter_Transmission>
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	84 30       	cpi	r24, 0x04	; 4
 238:	19 f0       	breq	.+6      	; 0x240 <__vector_9+0xd4>
 23a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Counter_Transmission>
 23e:	15 c0       	rjmp	.+42     	; 0x26a <__vector_9+0xfe>
 240:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <Counter_Transmission>
 244:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Counter_Transmission_Data>
 248:	8f 5f       	subi	r24, 0xFF	; 255
 24a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Counter_Transmission_Data>
 24e:	8a 30       	cpi	r24, 0x0A	; 10
 250:	21 f4       	brne	.+8      	; 0x25a <__vector_9+0xee>
 252:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <Counter_Transmission_Data>
 256:	0e 94 a3 00 	call	0x146	; 0x146 <_Z14USART_Transmith>
 25a:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <Counter_Transmission_Data>
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	e0 50       	subi	r30, 0x00	; 0
 262:	ff 4f       	sbci	r31, 0xFF	; 255
 264:	80 81       	ld	r24, Z
 266:	0e 94 6d 00 	call	0xda	; 0xda <_Z29Computing_Transmission_Valuesh>
 26a:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <Counter_Transmission>
 26e:	e3 30       	cpi	r30, 0x03	; 3
 270:	21 f4       	brne	.+8      	; 0x27a <__vector_9+0x10e>
 272:	89 e0       	ldi	r24, 0x09	; 9
 274:	0e 94 a3 00 	call	0x146	; 0x146 <_Z14USART_Transmith>
 278:	06 c0       	rjmp	.+12     	; 0x286 <__vector_9+0x11a>
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	e2 5e       	subi	r30, 0xE2	; 226
 27e:	fe 4f       	sbci	r31, 0xFE	; 254
 280:	80 81       	ld	r24, Z
 282:	0e 94 a3 00 	call	0x146	; 0x146 <_Z14USART_Transmith>
 286:	ff 91       	pop	r31
 288:	ef 91       	pop	r30
 28a:	bf 91       	pop	r27
 28c:	af 91       	pop	r26
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	7f 91       	pop	r23
 294:	6f 91       	pop	r22
 296:	5f 91       	pop	r21
 298:	4f 91       	pop	r20
 29a:	3f 91       	pop	r19
 29c:	2f 91       	pop	r18
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <__vector_1>:
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	8f 93       	push	r24
 2b4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 2b8:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 2bc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <US_Time_L>
 2c0:	8f 91       	pop	r24
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <__vector_2>:
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	8f 93       	push	r24
 2d8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 2dc:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 2e0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <US_Time_R>
 2e4:	8f 91       	pop	r24
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <__vector_13>:
 2f0:	1f 92       	push	r1
 2f2:	0f 92       	push	r0
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	0f 92       	push	r0
 2f8:	11 24       	eor	r1, r1
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <__vector_21>:
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	8f 93       	push	r24
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
 314:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 318:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <Channel>
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	e0 5f       	subi	r30, 0xF0	; 240
 320:	fe 4f       	sbci	r31, 0xFE	; 254
 322:	80 83       	st	Z, r24
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	8f 91       	pop	r24
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <_Z7Forwardhh>:
 334:	87 bd       	out	0x27, r24	; 39
 336:	68 bd       	out	0x28, r22	; 40
 338:	29 98       	cbi	0x05, 1	; 5
 33a:	28 98       	cbi	0x05, 0	; 5
 33c:	08 95       	ret

0000033e <_Z4Stopv>:
}

//Stop the motors
void Stop (void) {
	PWMA = 0; //Velocity = 0
 33e:	17 bc       	out	0x27, r1	; 39
	PWMB = 0; //Brake low (outputs shorted to ground)
 340:	18 bc       	out	0x28, r1	; 40
 342:	08 95       	ret

00000344 <main>:
void Data_Visualizer (void); //Define datas to be vizualized


//Main routine
int main(void) {
	Init(); //Initalize the MC
 344:	0e 94 48 00 	call	0x90	; 0x90 <_Z4Initv>
	USART_Init(MYUBRR); //Transmision/reception initialize
 348:	8c e0       	ldi	r24, 0x0C	; 12
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 ab 00 	call	0x156	; 0x156 <_Z10USART_Initj>
	sei(); //Enable all interrupts
 350:	78 94       	sei
	//cli(); //Clear all interrupts
	Stop();
 352:	0e 94 9f 01 	call	0x33e	; 0x33e <_Z4Stopv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	2f ef       	ldi	r18, 0xFF	; 255
 358:	83 ed       	ldi	r24, 0xD3	; 211
 35a:	90 e3       	ldi	r25, 0x30	; 48
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0x18>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x22>
 366:	00 00       	nop
	_delay_ms(1000);
	//char Motor_Left = 185; //Normal PWM parameter for...
	//char Motor_Right = 192; //...driving straight on
	Threshold = 100;	
 368:	84 e6       	ldi	r24, 0x64	; 100
 36a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Threshold>
	
	
	
	while (1) {
		sum_L = Analogue_value[0] + Analogue_value[1] + Analogue_value[2] + Analogue_value[3];
 36e:	c0 e1       	ldi	r28, 0x10	; 16
 370:	d1 e0       	ldi	r29, 0x01	; 1
		sum_R = Analogue_value[4] + Analogue_value[5] + Analogue_value[6] + Analogue_value[7];
		if (US_Time_L > 26 && US_Time_R > 26){
			if (sum_L > sum_R) Forward((unsigned char) 95+25*(sum_R/sum_L),127);
			else Forward(120,(unsigned char) 100+27*(sum_L/sum_R));
 372:	0b e1       	ldi	r16, 0x1B	; 27
	
	while (1) {
		sum_L = Analogue_value[0] + Analogue_value[1] + Analogue_value[2] + Analogue_value[3];
		sum_R = Analogue_value[4] + Analogue_value[5] + Analogue_value[6] + Analogue_value[7];
		if (US_Time_L > 26 && US_Time_R > 26){
			if (sum_L > sum_R) Forward((unsigned char) 95+25*(sum_R/sum_L),127);
 374:	19 e1       	ldi	r17, 0x19	; 25
	Threshold = 100;	
	
	
	
	while (1) {
		sum_L = Analogue_value[0] + Analogue_value[1] + Analogue_value[2] + Analogue_value[3];
 376:	28 81       	ld	r18, Y
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	28 0f       	add	r18, r24
 37c:	8a 81       	ldd	r24, Y+2	; 0x02
 37e:	28 0f       	add	r18, r24
 380:	8b 81       	ldd	r24, Y+3	; 0x03
 382:	28 0f       	add	r18, r24
 384:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <sum_L>
		sum_R = Analogue_value[4] + Analogue_value[5] + Analogue_value[6] + Analogue_value[7];
 388:	9c 81       	ldd	r25, Y+4	; 0x04
 38a:	8d 81       	ldd	r24, Y+5	; 0x05
 38c:	98 0f       	add	r25, r24
 38e:	8e 81       	ldd	r24, Y+6	; 0x06
 390:	98 0f       	add	r25, r24
 392:	8f 81       	ldd	r24, Y+7	; 0x07
 394:	69 2f       	mov	r22, r25
 396:	68 0f       	add	r22, r24
 398:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <sum_R>
		if (US_Time_L > 26 && US_Time_R > 26){
 39c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <US_Time_L>
 3a0:	8b 31       	cpi	r24, 0x1B	; 27
 3a2:	e8 f0       	brcs	.+58     	; 0x3de <main+0x9a>
 3a4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <US_Time_R>
 3a8:	8b 31       	cpi	r24, 0x1B	; 27
 3aa:	c8 f0       	brcs	.+50     	; 0x3de <main+0x9a>
			if (sum_L > sum_R) Forward((unsigned char) 95+25*(sum_R/sum_L),127);
 3ac:	62 17       	cp	r22, r18
 3ae:	60 f4       	brcc	.+24     	; 0x3c8 <main+0x84>
 3b0:	86 2f       	mov	r24, r22
 3b2:	62 2f       	mov	r22, r18
 3b4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__udivmodqi4>
 3b8:	81 9f       	mul	r24, r17
 3ba:	80 2d       	mov	r24, r0
 3bc:	11 24       	eor	r1, r1
 3be:	6f e7       	ldi	r22, 0x7F	; 127
 3c0:	81 5a       	subi	r24, 0xA1	; 161
 3c2:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
 3c6:	d7 cf       	rjmp	.-82     	; 0x376 <main+0x32>
			else Forward(120,(unsigned char) 100+27*(sum_L/sum_R));
 3c8:	82 2f       	mov	r24, r18
 3ca:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__udivmodqi4>
 3ce:	80 9f       	mul	r24, r16
 3d0:	60 2d       	mov	r22, r0
 3d2:	11 24       	eor	r1, r1
 3d4:	6c 59       	subi	r22, 0x9C	; 156
 3d6:	88 e7       	ldi	r24, 0x78	; 120
 3d8:	0e 94 9a 01 	call	0x334	; 0x334 <_Z7Forwardhh>
 3dc:	cc cf       	rjmp	.-104    	; 0x376 <main+0x32>
		}
		else{
			Stop();
 3de:	0e 94 9f 01 	call	0x33e	; 0x33e <_Z4Stopv>
 3e2:	c9 cf       	rjmp	.-110    	; 0x376 <main+0x32>

000003e4 <__udivmodqi4>:
 3e4:	99 1b       	sub	r25, r25
 3e6:	79 e0       	ldi	r23, 0x09	; 9
 3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <__udivmodqi4_ep>

000003ea <__udivmodqi4_loop>:
 3ea:	99 1f       	adc	r25, r25
 3ec:	96 17       	cp	r25, r22
 3ee:	08 f0       	brcs	.+2      	; 0x3f2 <__udivmodqi4_ep>
 3f0:	96 1b       	sub	r25, r22

000003f2 <__udivmodqi4_ep>:
 3f2:	88 1f       	adc	r24, r24
 3f4:	7a 95       	dec	r23
 3f6:	c9 f7       	brne	.-14     	; 0x3ea <__udivmodqi4_loop>
 3f8:	80 95       	com	r24
 3fa:	08 95       	ret

000003fc <_exit>:
 3fc:	f8 94       	cli

000003fe <__stop_program>:
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <__stop_program>
